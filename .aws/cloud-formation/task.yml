AWSTemplateFormatVersion: '2010-09-09'
Description: Create container on ecs cluster

Resources:
  
  # Create a TaskDefinition with container details
  Task:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: task-{app_name}-{environment}
      # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
      # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
      # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
      # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
      # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
      Cpu: 256
      # 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
      # 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
      # 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
      # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
      # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !ImportValue ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: '{app_name}-{environment}' 
          Image: 'amazon/amazon-ecs-sample'
          Cpu: '10'
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
          EntryPoint:
            - /usr/sbin/apache2
            - '-D'
            - FOREGROUND
          Memory: '500'
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: 'logs-{app_name}-{environment}' 
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: '{app_name}-{environment}' 

  # Create an ECS Service and add created Cluster, TaskDefintion, Subnets, TargetGroup and SecurityGroup
  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      ServiceName: '{app_name}-{environment}' 
      TaskDefinition: !Ref Task
      Cluster: !ImportValue 'ECSCluster'
      LaunchType: FARGATE
      DesiredCount: 2
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 70
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !ImportValue Subnet1
            - !ImportValue Subnet2
          SecurityGroups:
            - !ImportValue ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: '{app_name}-{environment}'
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup

  # Create a TargetGroup for HTTP port 80
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: '{app_name}-{environment}' 
      VpcId: !ImportValue VPC
      Port: 80
      Protocol: HTTP
      # Matcher:
      #   HttpCode: 200-299
 #     HealthCheckIntervalSeconds: 10
 #     HealthCheckPath: /stat
 #     HealthCheckProtocol: HTTP
 #     HealthCheckTimeoutSeconds: 5
 #     HealthyThresholdCount: 10
      TargetType: ip

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !ImportValue Listener
      Priority: 2
      Conditions:
        - Field: path-pattern
          Values:
            - /*
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

Outputs:

  ApiEndpoint:
    Description: '{app_name} {environment} Endpoint'
    Value: !Join ['', ['http://', !ImportValue DomainName]]
    Export:
      Name: '{app_name}-{environment}-endpoint'
